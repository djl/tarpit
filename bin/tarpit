#!/usr/bin/env python
"""
Usage: tarpit [<backup>]
"""
import datetime
import os
import subprocess
import sys

try:
    import configparser
except ImportError:
    import ConfigParser as configparser


FILE = '~/.tarpit'


def error(msg, exitcode=1):
    """
    Print ``msg`` to stderr and exit with ``exitcode``.
    """
    msg = os.path.basename(sys.argv[0]) + ': ' + msg
    sys.stderr.write(msg + '\n')
    sys.exit(exitcode)


def expand(fn):
    """
    Fully expand a path.
    """
    fn = os.path.expandvars(fn)
    fn = os.path.expanduser(fn)
    return os.path.abspath(fn)


class Backup(object):

    OPTIONS = ['name', 'files', 'exclude']
    REQUIRED_OPTIONS = ['name', 'files']

    def __init__(self, **kwargs):
        for k, v in kwargs.items():
            setattr(self, k, v)

        self.validate_options()
        self.validate_files()
        self.validate_exclude()

    def validate_exclude(self):
        """
        Validate the `exclude` option.
        """
        try:
            self.exclude = self.validate_filenames(self.exclude, True)
        except AttributeError:
            self.exclude = []

    def validate_filenames(self, files, skip_missing=False):
        """
        Make sure the given list files is not empty and that each file
        exists.
        """
        if not files:
            error("No files specified for backup '%s'" % self.backup)

        validated = []
        for fn in files.split(','):
            fn = expand(fn.strip())
            if not any([os.path.isfile(fn), os.path.isdir(fn)]):
                if skip_missing:
                    continue
                error("Invalid file/directory '%s' for backup '%s'" % (fn, self.backup))
            validated.append(fn)
        return validated

    def validate_files(self):
        """
        Validate the `files` option.
        """
        self.files = self.validate_filenames(self.files)

    def validate_options(self):
        """
        Make sure each required option is present.
        """
        for option in self.REQUIRED_OPTIONS:
            if not getattr(self, option, None):
                error("Backup '%s' is missing option '%s'" % (self.backup, option))

    def run(self):
        """
        Run Tarsnap
        """
        filename = datetime.datetime.now().strftime(self.name)
        commands = ['tarsnap', '-c', '-f', filename]
        if self.exclude:
            commands.append('--exclude ' + ' '.join(self.exclude))
        commands.append(' '.join(self.files))
        proc = subprocess.Popen(' '.join(commands), shell=True)
        proc.communicate()


def main():
    config = configparser.ConfigParser()

    try:
        config.readfp(open(expand(FILE)))
    except IOError:
        error("Couldn't read your config file.")

    # list all backups
    if len(sys.argv) == 1:
        sys.stdout.write('\n'.join(sorted(config.sections())) + '\n')
        sys.exit(0)

    # does the backup exist?
    try:
        options = dict(config.items(sys.argv[1]))
        options['backup'] = sys.argv[1]
    except configparser.NoSectionError:
        error("Invalid backup '%s'" % sys.argv[1])

    # backup is good. let's do it
    backup = Backup(**options)
    backup.run()


if __name__ == '__main__':
    main()
